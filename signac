library(Seurat)
library(Signac)
library(GenomicRanges)
library(ggplot2)
library(patchwork)
library(GenomicFeatures)

# 设置输出目录
output_dir <- "/disk191/users_dir/buyu/signac/objects"
plots_dir  <- "/disk191/users_dir/buyu/signac/plots"

# 创建输出目录（如果不存在）
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)

# 加载已有的数据
atac_path <- file.path("/disk192/users_dir/buyu/2025-7-7重新注释结果/signac", "objects", "atac_with_geneactivity_complete.rds")
pbmc_atac <- readRDS(atac_path)

rna_path <- "/disk192/users_dir/buyu/2025-7-7重新注释结果/object_final_annotated_corrected_v2.qs"
pbmc_rna_new <- qread(rna_path)

# 检查并设置可变特征基因
if(length(VariableFeatures(pbmc_rna_new)) == 0){
  pbmc_rna_new <- FindVariableFeatures(pbmc_rna_new, nfeatures = 2000)
}
variable_genes <- VariableFeatures(pbmc_rna_new)

# 1. 寻找转移锚点
transfer.anchors <- FindTransferAnchors(
  reference = pbmc_rna_new,
  query = pbmc_atac,
  features = variable_genes,
  reduction = 'cca',
  query.assay = "GeneActivity",
  reference.assay = "RNA"
)

# 2. 标签传递
pbmc_atac <- TransferData(anchorset = transfer.anchors, refdata = pbmc_rna_new, weight.reduction = pbmc_atac[['pca']])

# 3. UMAP降维
pbmc_atac <- RunUMAP(pbmc_atac, reduction = "lsi", dims = 2:30)

# 4. 可视化对比 UMAP
plot1 <- DimPlot(
  object = pbmc_rna_new,
  group.by = "celltype_final",
  label = TRUE, repel = TRUE, raster=TRUE
) + ggtitle("scRNA-seq Reference")

plot2 <- DimPlot(
  object = pbmc_atac,
  group.by = "predicted.id",
  label = TRUE, repel = TRUE, raster=TRUE
) + ggtitle("scATAC-seq Predicted")

combined_plot <- plot1 + plot2
print(combined_plot)

# 5. 预测分数分布
plot_hist <- ggplot(pbmc_atac@meta.data, aes(x = prediction.score.max)) +
  geom_histogram(bins = 50, fill = "steelblue", color = "black", alpha = 0.7) +
  geom_vline(xintercept = 0.5, color = "red", linetype = "dashed") +
  labs(title = "Prediction Score Distribution", x = "Prediction Score", y = "Cell Count") +
  theme_minimal()

print(plot_hist)

# 6. 保存对象和图表
saveRDS(pbmc_atac, file.path(output_dir, "integrated_analysis_11celltypes_final_atac_annotated.rds"))
saveRDS(transfer.anchors, file.path(output_dir, "integrated_analysis_11celltypes_transfer_anchors.rds"))

ggsave(file.path(plots_dir, "integration_combined_umap.pdf"), plot=combined_plot, width=15, height=7)
ggsave(file.path(plots_dir, "prediction_score_histogram.pdf"), plot=plot_hist, width=8, height=6)

cat("🎉 分析完成！对象和图表已保存到 /disk191/users_dir/buyu/signac/ 下！\n")

# scATAC-seq差异峰分析

# 加载必要包
library(Seurat)
library(Signac)
library(GenomicRanges)
library(ggplot2)
library(patchwork)
library(rtracklayer)

# 1. 参数区
immune_types <- c("CD4_cells", "CD8_cells", "NK_cells", "Neutrophils",
                  "Macrophages", "B_cells", "Plasma_cells", "DC_cells")
output_dir <- "/disk191/users_dir/buyu/signac/immune_DA_results"
plot_dir <- file.path(output_dir, "violin_plots")
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(plot_dir, recursive = TRUE, showWarnings = FALSE)

# 2. 读取Seurat对象
pbmc_atac <- readRDS("/disk191/users_dir/buyu/signac/objects/integrated_analysis_11celltypes_final_atac_annotated.rds")

# 3. 设置Assay和分群
assay_name <- if ("ATAC" %in% Assays(pbmc_atac)) "ATAC" else "peaks"
DefaultAssay(pbmc_atac) <- assay_name
latent_var <- if ("nCount_ATAC" %in% colnames(pbmc_atac@meta.data)) "nCount_ATAC" else "nCount_peaks"
Idents(pbmc_atac) <- pbmc_atac$predicted.id

# 4. 用rtracklayer读取GTF并提取基因注释
gtf_file <- "/disk191/users_dir/buyu/signac/Sus_scrofa.Sscrofa11.1.114.chr.gtf.gz"
gtf <- import(gtf_file)
genes_gr <- gtf[gtf$type == "gene"]
# genes_gr的mcols包含gene_id、gene_name等

# 5. 循环分析
for (i in 1:(length(immune_types) - 1)) {
  for (j in (i + 1):length(immune_types)) {
    group1 <- immune_types[i]
    group2 <- immune_types[j]
    cat("Comparing:", group1, "vs", group2, "\n")
    da_peaks <- FindMarkers(
      object = pbmc_atac,
      ident.1 = group1,
      ident.2 = group2,
      test.use = 'LR',
      latent.vars = latent_var
    )

    # 仅保留有意义的peak（正负向合并top10，p值显著）
    da_peaks$peak <- rownames(da_peaks)
    sig_peaks_pos <- da_peaks[da_peaks$avg_log2FC > 0 & da_peaks$p_val_adj < 0.05, ]
    sig_peaks_neg <- da_peaks[da_peaks$avg_log2FC < 0 & da_peaks$p_val_adj < 0.05, ]
    top_peaks <- rbind(
      head(sig_peaks_pos[order(-sig_peaks_pos$avg_log2FC), ], 10),
      head(sig_peaks_neg[order(sig_peaks_neg$avg_log2FC), ], 10)
    )

    # 6. 注释peak
    peak_gr <- StringToGRanges(top_peaks$peak, sep = c("-", "-"))
    overlap <- findOverlaps(peak_gr, genes_gr, type = "any")
    top_peaks$gene_id <- NA
    top_peaks$gene_name <- NA
    if (length(overlap) > 0) {
      top_peaks$gene_id[queryHits(overlap)] <- genes_gr$gene_id[subjectHits(overlap)]
      # gene_name健壮性判断
      if ("gene_name" %in% names(mcols(genes_gr))) {
        top_peaks$gene_name[queryHits(overlap)] <- genes_gr$gene_name[subjectHits(overlap)]
      }
    }
    # 保存表格
    outcsv <- file.path(output_dir, paste0("DApeaks_", group1, "_vs_", group2, "_top10_annotated.csv"))
    write.csv(top_peaks, outcsv, row.names = FALSE)

    # 7. 小提琴图（每组前5正向/负向峰）
    plot_peaks <- c(
      head(top_peaks[top_peaks$avg_log2FC > 0, "peak"], 5),
      head(top_peaks[top_peaks$avg_log2FC < 0, "peak"], 5)
    )
    plot_peaks <- plot_peaks[!is.na(plot_peaks)]
    for (p in plot_peaks) {
      plt <- VlnPlot(pbmc_atac, features = p, group.by = "predicted.id", pt.size = 0.1) +
        ggtitle(paste0("Peak: ", p, "\n", group1, " vs ", group2))
      ggsave(file.path(plot_dir, paste0("Vln_", group1, "_vs_", group2, "_", gsub("[:-]", "_", p), ".pdf")),
             plt, width = 6, height = 4)
    }
  }
}
cat("全部分析完成！\n")






#####差异分析
# 加载必要包
library(Seurat)
library(Signac)
library(GenomicRanges)
library(ggplot2)
library(patchwork)
library(rtracklayer)
library(future) # <-- 新增：加载并行计算包

# --- 1. 参数设置 ---
# (这部分保持不变)
immune_types <- c("CD4_cells", "CD8_cells", "NK_cells", "Neutrophils",
                  "Macrophages", "B_cells", "Plasma_cells", "DC_cells")

# --- 路径修改：更新为 disk192 的新路径 ---
base_path <- "/disk192/users_dir/buyu/2025-7-7重新注释结果/signac"
output_dir <- file.path(base_path, "immune_DA_results_optimized")
plot_dir <- file.path(output_dir, "violin_plots")
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(plot_dir, recursive = TRUE, showWarnings = FALSE)

# --- 1.5. 设置并行计算环境 (关键新增部分) ---
# 根据您的服务器配置（64核），设置并行工作进程数。
# 如果您在 RStudio 中运行，请使用 plan("multisession", workers = 64)
cat("Setting up parallel processing with 64 workers...\n")
plan("multicore", workers = 64)
# 增加 future 全局变量的大小限制，防止因 Seurat 对象过大而报错
# 根据您的服务器内存（500GB）进行调整，这里设置为 400GB。
options(future.globals.maxSize = 400 * 1024^3)


# --- 2. 读取并准备Seurat对象 ---
# --- 路径修改：更新为 disk192 的新路径 ---
rds_path <- file.path(base_path, "objects/integrated_analysis_11celltypes_final_atac_annotated.rds")
cat("Loading Seurat object from:", rds_path, "\n")
pbmc_atac <- readRDS(rds_path)

# --- 3. 设置Assay和分群 ---
# (这部分保持不变)
assay_name <- if ("ATAC" %in% Assays(pbmc_atac)) "ATAC" else "peaks"
DefaultAssay(pbmc_atac) <- assay_name
latent_var <- if ("nCount_ATAC" %in% colnames(pbmc_atac@meta.data)) "nCount_ATAC" else "nCount_peaks"
Idents(pbmc_atac) <- pbmc_atac$predicted.id

# --- 4. 设置基因注释 (关键步骤) ---
# --- 路径修改：更新为 disk192 的新路径 ---
gtf_file <- file.path(base_path, "Sus_scrofa.Sscrofa11.1.114.chr.gtf.gz")
cat("Setting up gene annotations for Signac using:", gtf_file, "\n")

# 从GTF文件导入注释
annotations <- rtracklayer::import(gtf_file)
# 确保染色体命名风格与 Seurat 对象中的一致 (例如 'chr1' vs '1')
# 如果 pbmc_atac 中的染色体名是 '1', '2', ... 就用 'NCBI'
# 如果是 'chr1', 'chr2', ... 就用 'UCSC'
# 请根据您的数据检查并修改
seqlevelsStyle(annotations) <- "UCSC" 
# 将注释信息赋予 Seurat 对象
Annotation(pbmc_atac) <- annotations

# --- 5. 循环进行差异可及性分析 ---
# FindMarkers 将会自动使用上面设置的并行方案
cat("Starting pairwise differential accessibility analysis...\n")
for (i in 1:(length(immune_types) - 1)) {
  for (j in (i + 1):length(immune_types)) {
    group1 <- immune_types[i]
    group2 <- immune_types[j]
    
    # 检查两个 ident 是否都存在于数据中，避免出错
    if (!group1 %in% levels(Idents(pbmc_atac)) || !group2 %in% levels(Idents(pbmc_atac))) {
        cat("Skipping comparison:", group1, "vs", group2, "- one or both cell types not found.\n")
        next
    }
    
    cat("Comparing:", group1, "vs", group2, "\n")
    
    # 寻找差异 Peak (逻辑不变，但会自动并行)
    da_peaks <- FindMarkers(
      object = pbmc_atac,
      ident.1 = group1,
      ident.2 = group2,
      test.use = 'LR',
      latent.vars = latent_var,
      min.pct = 0.05 # 建议增加一个阈值，加快速度
    )

    # --- 6. 筛选、注释并保存结果 (优化后的逻辑) ---
    
    # 首先，筛选所有显著的差异 Peak
    sig_peaks <- da_peaks[da_peaks$p_val_adj < 0.05, ]
    
    if (nrow(sig_peaks) == 0) {
        cat("No significant DA peaks found for", group1, "vs", group2, ". Skipping.\n")
        next
    }
    
    # 对所有显著的 peak 进行注释
    cat("Annotating all significant peaks...\n")
    sig_peaks$peak <- rownames(sig_peaks)
    closest_features_all <- ClosestFeature(pbmc_atac, regions = rownames(sig_peaks))
    annotated_sig_peaks <- cbind(sig_peaks, closest_features_all[, c("gene_name", "closest_region", "distance")])
    
    # **保存第一个文件：所有显著的差异 Peak**
    outcsv_all <- file.path(output_dir, paste0("DApeaks_", group1, "_vs_", group2, "_allsig_annotated.csv"))
    write.csv(annotated_sig_peaks, outcsv_all, row.names = FALSE)
    cat("Saved all", nrow(annotated_sig_peaks), "significant peaks to:", outcsv_all, "\n")
    
    # 其次，从已注释的结果中挑选 Top 50
    top_50_pos <- head(annotated_sig_peaks[order(-annotated_sig_peaks$avg_log2FC), ], 50)
    top_50_neg <- head(annotated_sig_peaks[order(annotated_sig_peaks$avg_log2FC), ], 50)
    top_50_df <- rbind(top_50_pos, top_50_neg)
    
    # **保存第二个文件：Top 50 的差异 Peak**
    if (nrow(top_50_df) > 0) {
        outcsv_top50 <- file.path(output_dir, paste0("DApeaks_", group1, "_vs_", group2, "_top50_annotated.csv"))
        write.csv(top_50_df, outcsv_top50, row.names = FALSE)
        cat("Saved top", nrow(top_50_df), "peaks to:", outcsv_top50, "\n")
    }

    # --- 7. 批量绘制小提琴图 (可视化Top 20) ---
    cat("Generating violin plots for top 20 peaks...\n")
    
    # 从 top 50 结果中挑选 top 10 上调和 top 10 下调的 peak 进行可视化
    plot_peaks_pos <- head(top_50_df[top_50_df$avg_log2FC > 0, ], 10)
    plot_peaks_neg <- head(top_50_df[top_50_df$avg_log2FC < 0, ], 10)
    plot_peaks_df <- rbind(plot_peaks_pos, plot_peaks_neg)
    
    if (nrow(plot_peaks_df) > 0) {
      plot_peaks <- plot_peaks_df$peak
      
      # 一次性调用 VlnPlot
      vln_plot <- VlnPlot(
        pbmc_atac,
        features = plot_peaks,
        group.by = "predicted.id",
        pt.size = 0, # 设为0更清晰
        ncol = 2     # 每行显示2个图
      ) + labs(title = paste(group1, "vs", group2, "(Top 20 Peaks)")) # 添加总标题
      
      # 保存到一个PDF文件中
      pdf_path <- file.path(plot_dir, paste0("Vln_", group1, "_vs_", group2, "_top20_DApeaks.pdf"))
      ggsave(pdf_path, vln_plot, width = 12, height = 5 * ceiling(length(plot_peaks) / 2), limitsize = FALSE)
    }
  }
}
cat("全部分析完成！结果保存在:", output_dir, "\n")


