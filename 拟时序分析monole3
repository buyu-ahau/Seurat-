####严禁多线程（炸内存）
library(qs)
library(Seurat)
library(monocle3)
library(SeuratWrappers)
library(ggplot2)
library(igraph)

# 配置路径
seurat_path <- "/disk192/users_dir/buyu/2025-7-7重新注释结果/object_final_annotated_corrected_v2.qs"
main_dir <- "/disk192/users_dir/buyu/2025-7-7重新注释结果/monocle3_pretty"

# 获取所有celltype
seurat_obj <- qread(seurat_path)
celltypes <- unique(seurat_obj$celltype_final)
rm(seurat_obj)

for (ct in celltypes) {
  out_dir <- file.path(main_dir, paste0("root_", ct))
  result_file <- file.path(out_dir, "monocle3_result.rds")
  # 跳过已完成的celltype
  if (file.exists(result_file)) {
    cat("已存在，跳过:", ct, "\n")
    next
  }
  cat("开始分析:", ct, "\n")
  if (!dir.exists(out_dir)) dir.create(out_dir, recursive = TRUE)
  # 重新加载对象
  seurat_obj <- qread(seurat_path)
  cds <- as.cell_data_set(seurat_obj)
  colData(cds)$celltype_final <- seurat_obj$celltype_final
  # 轨迹分析主流程
  cds <- cluster_cells(cds, cluster_method = 'louvain')
  cds <- learn_graph(cds, use_partition = TRUE, verbose = TRUE,
                     learn_graph_control = list(minimal_branch_len = 10))
  start_cells <- colnames(cds)[colData(cds)$celltype_final == ct]
  if (length(start_cells) == 0) {
    cat("该类型无细胞:", ct, "\n")
    next
  }
  closest_vertex <- cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
  closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
  root_pr_nodes <- igraph::V(principal_graph(cds)[["UMAP"]])$name
  flag <- closest_vertex[start_cells, ]
  flag <- as.numeric(names(which.max(table(flag))))
  root_pr_nodes <- root_pr_nodes[flag]
  cds <- order_cells(cds, root_pr_nodes = root_pr_nodes)
  # 轨迹图
  p <- plot_cells(
    cds,
    color_cells_by = "pseudotime",
    label_cell_groups = FALSE,
    label_groups_by_cluster = FALSE,
    label_roots = FALSE,
    label_leaves = FALSE,
    label_branch_points = FALSE,
    cell_size = 0.5,
    group_label_size = 3,
    rasterize = FALSE
  )
  pdf_file <- file.path(out_dir, paste0("Pseudotime_umap_", ct, ".pdf"))
  ggsave(p, filename = pdf_file, width = 5.5, height = 4)
  # 拟时序
  time <- monocle3::pseudotime(cds)
  time[is.infinite(time)] <- 0
  time_df <- data.frame(cell = names(time), pseudotime = time)
  write.table(time_df, file = file.path(out_dir, "pseudotime_data.txt"),
              sep = "\t", quote = FALSE, col.names = TRUE, row.names = FALSE)
  # 保存对象
  saveRDS(cds, file = file.path(out_dir, "monocle3_result.rds"))
  saveRDS(seurat_obj, file = file.path(out_dir, "seurat_processed_data.rds"))
  # DEG分析
  deg_res <- graph_test(cds, neighbor_graph = "principal_graph", cores = 4)
  write.csv(as.data.frame(deg_res), file = file.path(out_dir, paste0("deg_graph_test_", ct, ".csv")))
  # 释放内存
  rm(seurat_obj, cds, p, time, time_df, deg_res)
  gc()
}
cat("所有celltype分析完毕！\n")
